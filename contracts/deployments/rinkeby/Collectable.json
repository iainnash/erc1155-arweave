{
  "address": "0x183FB71872DC704F3a2c8FDAE4e002F19B76708A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "collectableName",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "everyoneMint",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getCollection",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        },
        {
          "internalType": "uint16",
          "name": "editions",
          "type": "uint16"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "size",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        },
        {
          "internalType": "uint16",
          "name": "editions",
          "type": "uint16"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe1e20cd8d6c99d5e040a4b003071b5bec4f1103b2cc71b6bfe0f0a8df8ddadc1",
  "receipt": {
    "to": null,
    "from": "0x67D5043252236eB87Ace238f8981e7288691Bf48",
    "contractAddress": "0x183FB71872DC704F3a2c8FDAE4e002F19B76708A",
    "transactionIndex": 17,
    "gasUsed": "1957811",
    "logsBloom": "0x
    "blockHash": "0xd3affde52119076bc6b33def828b0f2daf6be8a0fac0a8fe3eb668a9319a2b63",
    "transactionHash": "0xe1e20cd8d6c99d5e040a4b003071b5bec4f1103b2cc71b6bfe0f0a8df8ddadc1",
    "logs": [
      {
        "transactionIndex": 17,
        "blockNumber": 8394964,
        "transactionHash": "0xe1e20cd8d6c99d5e040a4b003071b5bec4f1103b2cc71b6bfe0f0a8df8ddadc1",
        "address": "0x183FB71872DC704F3a2c8FDAE4e002F19B76708A",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000067d5043252236eb87ace238f8981e7288691bf48"
        ],
        "data": "0x",
        "logIndex": 31,
        "blockHash": "0xd3affde52119076bc6b33def828b0f2daf6be8a0fac0a8fe3eb668a9319a2b63"
      }
    ],
    "blockNumber": 8394964,
    "cumulativeGasUsed": "8151204",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "ARWeaveCollectable",
    true
  ],
  "solcInputHash": "017f55c117663beaa3ef91576173fd5b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"collectableName\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"everyoneMint\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getCollection\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"editions\",\"type\":\"uint16\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"size\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"editions\",\"type\":\"uint16\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Collectable.sol\":\"Collectable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":300},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n *\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping (uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping (address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor (string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155).interfaceId\\n            || interfaceId == type(IERC1155MetadataURI).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    )\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        _balances[id][from] = fromBalance - amount;\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            _balances[id][from] = fromBalance - amount;\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address account, uint256 id, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        _balances[id][account] = accountBalance - amount;\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n    { }\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x8d0a3d2756dc8eff2b2563b52a6dcd3ab36e07b57211d3ac7c76efee6c4682e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x249bc2a6d919da5f5145950664134cfcf2f66874bda801fd3b8fb861783da079\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\",\"keccak256\":\"0xc7aa8a96aaeb7e1672a3d5fd37582136ff46b6a6cafabcc40ec0e00a42915e1c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6ba0564f6970414d1166ee83127b834bbe7dbf699241a3005eb7ae64a2211975\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/Collectable.sol\":{\"content\":\"// contracts/GameItems.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nstring constant METADATA_FILEPATH = \\\".json\\\";\\nstring constant METADATA_SEPERATOR = \\\"/\\\";\\n\\ncontract Collectable is ERC1155, Ownable {\\n    constructor(string memory collectableName, bool everyoneMint) ERC1155(\\\"\\\") {\\n        _everyoneMint = everyoneMint;\\n        name = collectableName;\\n    }\\n\\n    string public name;\\n    bool private _everyoneMint;\\n    uint16 private _atToken;\\n    uint16 private _collectionId;\\n    mapping(uint16 => string) private _collections;\\n    mapping(uint16 => uint256) private _collectionOffset;\\n    mapping(uint256 => uint16) private _idToCollection;\\n\\n    function uri(uint256 id) public view virtual override returns (string memory) {\\n        if (_idToCollection[id] != 0) {\\n            uint16 collectionId = _idToCollection[id];\\n            return string(abi.encodePacked(\\n                _collections[collectionId],\\n                METADATA_SEPERATOR,\\n                uint2str(id - _collectionOffset[collectionId]),\\n                METADATA_FILEPATH\\n            ));\\n        }\\n        return \\\"\\\";\\n    }\\n\\n    // TODO(validate): copied code\\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint j = _i;\\n        uint len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint k = len;\\n        while (_i != 0) {\\n            k = k-1;\\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    function _addCollection(string memory dirHash) internal returns (uint16) {\\n        _collectionId += 1;\\n        _collectionOffset[_collectionId] = _atToken;\\n        _collections[_collectionId] = dirHash;\\n        return _collectionId;\\n    }\\n\\n    function getCollection(uint256 id) public view returns (uint16) {\\n        return _idToCollection[id];\\n    }\\n\\n    function mint(string memory baseURI, uint16 editions) public {\\n        require(_everyoneMint || owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _idToCollection[_atToken + 1] = _addCollection(baseURI);\\n        _atToken += 1;\\n        _mint(_msgSender(), _atToken, editions, \\\"\\\");\\n    }\\n\\n    function mintBatch(uint8 size, string memory baseURI, uint16 editions) public {\\n        require(_everyoneMint || owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _addCollection(baseURI);\\n        for (uint8 i = 0; i < size; i += 1) {\\n            _atToken += 1;\\n            _idToCollection[_atToken] = _collectionId;\\n            _mint(_msgSender(), _atToken, editions, \\\"\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0x349d4003cc47cdca8da186452be72a4db13fce6a2a44a77f1b3550c0c2a5d01b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620023e6380380620023e68339810160408190526200003491620001ae565b6040805160208101909152600081526200004e81620000d5565b5060006200005b620000ee565b600380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506005805460ff19168215151790558151620000cc906004906020850190620000f2565b505050620002e5565b8051620000ea906002906020840190620000f2565b5050565b3390565b828054620001009062000292565b90600052602060002090601f0160209004810192826200012457600085556200016f565b82601f106200013f57805160ff19168380011785556200016f565b828001600101855582156200016f579182015b828111156200016f57825182559160200191906001019062000152565b506200017d92915062000181565b5090565b5b808211156200017d576000815560010162000182565b80518015158114620001a957600080fd5b919050565b60008060408385031215620001c1578182fd5b82516001600160401b0380821115620001d8578384fd5b818501915085601f830112620001ec578384fd5b815181811115620002015762000201620002cf565b6040516020601f8301601f1916820181018481118382101715620002295762000229620002cf565b604052828252848301810189101562000240578687fd5b8693505b8284101562000263578484018101518285018201529283019262000244565b828411156200027457868184840101525b8196506200028481890162000198565b955050505050509250929050565b600281046001821680620002a757607f821691505b60208210811415620002c957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6120f180620002f56000396000f3fe608060405234801561001057600080fd5b50600436106100f45760003560e01c80635a1f3c2811610097578063ab3491f911610066578063ab3491f914610202578063e985e9c514610215578063f242432a14610228578063f2fde38b1461023b576100f4565b80635a1f3c28146101b2578063715018a6146101d25780638da5cb5b146101da578063a22cb465146101ef576100f4565b80630e89341c116100d35780630e89341c146101575780632eb2c2d61461016a5780633f2eaea21461017f5780634e1273f414610192576100f4565b8062fdd58e146100f957806301ffc9a71461012257806306fdde0314610142575b600080fd5b61010c61010736600461163e565b61024e565b6040516101199190611e1f565b60405180910390f35b610135610130366004611725565b6102a5565b6040516101199190611a42565b61014a6102ed565b6040516101199190611a4d565b61014a6101653660046117a0565b61037b565b61017d6101783660046114fb565b610449565b005b61017d61018d36600461175d565b6106af565b6101a56101a0366004611667565b6107b1565b6040516101199190611a01565b6101c56101c03660046117a0565b6108d1565b6040516101199190611e10565b61017d6108e7565b6101e2610970565b6040516101199190611957565b61017d6101fd366004611604565b610980565b61017d6102103660046117b8565b610a4e565b6101356102233660046114c9565b610b66565b61017d6102363660046115a1565b610b94565b61017d6102493660046114a8565b610d2a565b60006001600160a01b03831661027f5760405162461bcd60e51b815260040161027690611b05565b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b14806102d657506001600160e01b031982166303a24d0760e21b145b806102e557506102e582610deb565b90505b919050565b600480546102fa90611f75565b80601f016020809104026020016040519081016040528092919081815260200182805461032690611f75565b80156103735780601f1061034857610100808354040283529160200191610373565b820191906000526020600020905b81548152906001019060200180831161035657829003601f168201915b505050505081565b60008181526008602052604090205460609061ffff16156104355760008281526008602090815260408083205461ffff16808452600683528184208251808401845260018152602f60f81b81860152828652600790945291909320549091906103ed906103e89087611f32565b610e04565b60405180604001604052806005815260200164173539b7b760d91b81525060405160200161041e949392919061189d565b6040516020818303038152906040529150506102e8565b505060408051602081019091526000815290565b815183511461046a5760405162461bcd60e51b815260040161027690611d87565b6001600160a01b0384166104905760405162461bcd60e51b815260040161027690611bdf565b610498610f4a565b6001600160a01b0316856001600160a01b031614806104be57506104be85610223610f4a565b6104da5760405162461bcd60e51b815260040161027690611c24565b60006104e4610f4a565b90506104f48187878787876106a7565b60005b845181101561064157600085828151811061052257634e487b7160e01b600052603260045260246000fd5b60200260200101519050600085838151811061054e57634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038e16835290935291909120549091508181101561059e5760405162461bcd60e51b815260040161027690611c76565b6105a88282611f32565b60008085815260200190815260200160002060008c6001600160a01b03166001600160a01b03168152602001908152602001600020819055508160008085815260200190815260200160002060008b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546106269190611eb6565b925050819055505050508061063a90611fb0565b90506104f7565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610691929190611a14565b60405180910390a46106a7818787878787610f4e565b505050505050565b60055460ff16806106df57506106c3610f4a565b6001600160a01b03166106d4610970565b6001600160a01b0316145b6106fb5760405162461bcd60e51b815260040161027690611cc0565b6107048261105c565b60055460089060009061072190610100900461ffff166001611e90565b61ffff90811682526020820192909252604001600020805461ffff191692821692909217909155600580546001928391610762918391610100900416611e90565b92506101000a81548161ffff021916908361ffff1602179055506107ad610787610f4a565b60055460408051602081019091526000815261ffff6101009092048216918516906110f8565b5050565b606081518351146107d45760405162461bcd60e51b815260040161027690611d3e565b6000835167ffffffffffffffff8111156107fe57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610827578160200160208202803683370190505b50905060005b84518110156108c95761088e85828151811061085957634e487b7160e01b600052603260045260246000fd5b602002602001015185838151811061088157634e487b7160e01b600052603260045260246000fd5b602002602001015161024e565b8282815181106108ae57634e487b7160e01b600052603260045260246000fd5b60209081029190910101526108c281611fb0565b905061082d565b509392505050565b60009081526008602052604090205461ffff1690565b6108ef610f4a565b6001600160a01b0316610900610970565b6001600160a01b0316146109265760405162461bcd60e51b815260040161027690611cc0565b6003546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600380546001600160a01b0319169055565b6003546001600160a01b03165b90565b816001600160a01b0316610992610f4a565b6001600160a01b031614156109b95760405162461bcd60e51b815260040161027690611cf5565b80600160006109c6610f4a565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155610a0a610f4a565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610a429190611a42565b60405180910390a35050565b60055460ff1680610a7e5750610a62610f4a565b6001600160a01b0316610a73610970565b6001600160a01b0316145b610a9a5760405162461bcd60e51b815260040161027690611cc0565b610aa38261105c565b5060005b8360ff168160ff161015610b60576001600560018282829054906101000a900461ffff16610ad59190611e90565b825461ffff91821661010093840a908102908302199091161790925560055490810482166000908152600860205260409020805461ffff1916630100000090920490921617905550610b4e610b28610f4a565b60055460408051602081019091526000815261ffff6101009092048216918616906110f8565b610b59600182611ece565b9050610aa7565b50505050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6001600160a01b038416610bba5760405162461bcd60e51b815260040161027690611bdf565b610bc2610f4a565b6001600160a01b0316856001600160a01b03161480610be85750610be885610223610f4a565b610c045760405162461bcd60e51b815260040161027690611b96565b6000610c0e610f4a565b9050610c2e818787610c1f886111df565b610c28886111df565b876106a7565b6000848152602081815260408083206001600160a01b038a16845290915290205483811015610c6f5760405162461bcd60e51b815260040161027690611c76565b610c798482611f32565b6000868152602081815260408083206001600160a01b038c81168552925280832093909355881681529081208054869290610cb5908490611eb6565b92505081905550856001600160a01b0316876001600160a01b0316836001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628888604051610d0b929190611e28565b60405180910390a4610d21828888888888611238565b50505050505050565b610d32610f4a565b6001600160a01b0316610d43610970565b6001600160a01b031614610d695760405162461bcd60e51b815260040161027690611cc0565b6001600160a01b038116610d8f5760405162461bcd60e51b815260040161027690611b50565b6003546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160e01b031981166301ffc9a760e01b14919050565b606081610e2957506040805180820190915260018152600360fc1b60208201526102e8565b8160005b8115610e535780610e3d81611fb0565b9150610e4c9050600a83611ef3565b9150610e2d565b60008167ffffffffffffffff811115610e7c57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610ea6576020820181803683370190505b509050815b8515610f4157610ebc600182611f32565b90506000610ecb600a88611ef3565b610ed690600a611f13565b610ee09088611f32565b610eeb906030611ece565b905060008160f81b905080848481518110610f1657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350610f38600a89611ef3565b97505050610eab565b50949350505050565b3390565b610f60846001600160a01b0316611309565b156106a75760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190610f99908990899088908890889060040161196b565b602060405180830381600087803b158015610fb357600080fd5b505af1925050508015610fe3575060408051601f3d908101601f19168201909252610fe091810190611741565b60015b61102c57610fef611ffd565b80610ffa5750611014565b8060405162461bcd60e51b81526004016102769190611a4d565b60405162461bcd60e51b815260040161027690611a60565b6001600160e01b0319811663bc197c8160e01b14610d215760405162461bcd60e51b815260040161027690611abd565b60006001600560038282829054906101000a900461ffff1661107e9190611e90565b825461ffff91821661010093840a9081029083021990911617909255600580546301000000808204851660009081526007602090815260408083209690940487169095559254049093168152600682529190912084516110e39350909185019061130f565b50506005546301000000900461ffff16919050565b6001600160a01b03841661111e5760405162461bcd60e51b815260040161027690611dcf565b6000611128610f4a565b905061113a81600087610c1f886111df565b6000848152602081815260408083206001600160a01b03891684529091528120805485929061116a908490611eb6565b92505081905550846001600160a01b031660006001600160a01b0316826001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6287876040516111c1929190611e28565b60405180910390a46111d881600087878787611238565b5050505050565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061122757634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b61124a846001600160a01b0316611309565b156106a75760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061128390899089908890889088906004016119c9565b602060405180830381600087803b15801561129d57600080fd5b505af19250505080156112cd575060408051601f3d908101601f191682019092526112ca91810190611741565b60015b6112d957610fef611ffd565b6001600160e01b0319811663f23a6e6160e01b14610d215760405162461bcd60e51b815260040161027690611abd565b3b151590565b82805461131b90611f75565b90600052602060002090601f01602090048101928261133d5760008555611383565b82601f1061135657805160ff1916838001178555611383565b82800160010185558215611383579182015b82811115611383578251825591602001919060010190611368565b5061138f929150611393565b5090565b5b8082111561138f5760008155600101611394565b80356001600160a01b03811681146102e857600080fd5b600082601f8301126113cf578081fd5b813560206113e46113df83611e60565b611e36565b8281528181019085830183850287018401881015611400578586fd5b855b8581101561141e57813584529284019290840190600101611402565b5090979650505050505050565b600082601f83011261143b578081fd5b813567ffffffffffffffff81111561145557611455611fe1565b611468601f8201601f1916602001611e36565b81815284602083860101111561147c578283fd5b816020850160208301379081016020019190915292915050565b803561ffff811681146102e857600080fd5b6000602082840312156114b9578081fd5b6114c2826113a8565b9392505050565b600080604083850312156114db578081fd5b6114e4836113a8565b91506114f2602084016113a8565b90509250929050565b600080600080600060a08688031215611512578081fd5b61151b866113a8565b9450611529602087016113a8565b9350604086013567ffffffffffffffff80821115611545578283fd5b61155189838a016113bf565b94506060880135915080821115611566578283fd5b61157289838a016113bf565b93506080880135915080821115611587578283fd5b506115948882890161142b565b9150509295509295909350565b600080600080600060a086880312156115b8578081fd5b6115c1866113a8565b94506115cf602087016113a8565b93506040860135925060608601359150608086013567ffffffffffffffff8111156115f8578182fd5b6115948882890161142b565b60008060408385031215611616578182fd5b61161f836113a8565b915060208301358015158114611633578182fd5b809150509250929050565b60008060408385031215611650578182fd5b611659836113a8565b946020939093013593505050565b60008060408385031215611679578182fd5b823567ffffffffffffffff80821115611690578384fd5b818501915085601f8301126116a3578384fd5b813560206116b36113df83611e60565b82815281810190858301838502870184018b10156116cf578889fd5b8896505b848710156116f8576116e4816113a8565b8352600196909601959183019183016116d3565b509650508601359250508082111561170e578283fd5b5061171b858286016113bf565b9150509250929050565b600060208284031215611736578081fd5b81356114c2816120a2565b600060208284031215611752578081fd5b81516114c2816120a2565b6000806040838503121561176f578182fd5b823567ffffffffffffffff811115611785578283fd5b6117918582860161142b565b9250506114f260208401611496565b6000602082840312156117b1578081fd5b5035919050565b6000806000606084860312156117cc578081fd5b833560ff811681146117dc578182fd5b9250602084013567ffffffffffffffff8111156117f7578182fd5b6118038682870161142b565b92505061181260408501611496565b90509250925092565b6000815180845260208085019450808401835b8381101561184a5781518752958201959082019060010161182e565b509495945050505050565b6000815180845261186d816020860160208601611f49565b601f01601f19169290920160200192915050565b60008151611893818560208601611f49565b9290920192915050565b84546000908190600281046001808316806118b957607f831692505b60208084108214156118d957634e487b7160e01b87526022600452602487fd5b8180156118ed57600181146118fe5761192a565b60ff1986168952848901965061192a565b6119078d611e84565b885b868110156119225781548b820152908501908301611909565b505084890196505b50505050505061194c6119466119408389611881565b87611881565b85611881565b979650505050505050565b6001600160a01b0391909116815260200190565b60006001600160a01b03808816835280871660208401525060a0604083015261199760a083018661181b565b82810360608401526119a9818661181b565b905082810360808401526119bd8185611855565b98975050505050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a0608083015261194c60a0830184611855565b6000602082526114c2602083018461181b565b600060408252611a27604083018561181b565b8281036020840152611a39818561181b565b95945050505050565b901515815260200190565b6000602082526114c26020830184611855565b60208082526034908201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560408201527f526563656976657220696d706c656d656e746572000000000000000000000000606082015260800190565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6020808252602b908201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60408201526a65726f206164647265737360a81b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526029908201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260408201526808185c1c1c9bdd995960ba1b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526032908201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206040820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526029908201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604082015268103337b91039b2b63360b91b606082015260800190565b60208082526029908201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604082015268040dad2e6dac2e8c6d60bb1b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b61ffff91909116815260200190565b90815260200190565b918252602082015260400190565b60405181810167ffffffffffffffff81118282101715611e5857611e58611fe1565b604052919050565b600067ffffffffffffffff821115611e7a57611e7a611fe1565b5060209081020190565b60009081526020902090565b600061ffff808316818516808303821115611ead57611ead611fcb565b01949350505050565b60008219821115611ec957611ec9611fcb565b500190565b600060ff821660ff84168060ff03821115611eeb57611eeb611fcb565b019392505050565b600082611f0e57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611f2d57611f2d611fcb565b500290565b600082821015611f4457611f44611fcb565b500390565b60005b83811015611f64578181015183820152602001611f4c565b83811115610b605750506000910152565b600281046001821680611f8957607f821691505b60208210811415611faa57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415611fc457611fc4611fcb565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60e01c90565b600060443d101561200d5761097d565b600481823e6308c379a06120218251611ff7565b1461202b5761097d565b6040513d600319016004823e80513d67ffffffffffffffff816024840111818411171561205b575050505061097d565b82840192508251915080821115612075575050505061097d565b503d8301602082840101111561208d5750505061097d565b601f01601f1916810160200160405291505090565b6001600160e01b0319811681146120b857600080fd5b5056fea26469706673582212207e2c64660e86c33d9656b02a8574cc6ccf6ca31012d56ec58b0ef9614df94d2164736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f45760003560e01c80635a1f3c2811610097578063ab3491f911610066578063ab3491f914610202578063e985e9c514610215578063f242432a14610228578063f2fde38b1461023b576100f4565b80635a1f3c28146101b2578063715018a6146101d25780638da5cb5b146101da578063a22cb465146101ef576100f4565b80630e89341c116100d35780630e89341c146101575780632eb2c2d61461016a5780633f2eaea21461017f5780634e1273f414610192576100f4565b8062fdd58e146100f957806301ffc9a71461012257806306fdde0314610142575b600080fd5b61010c61010736600461163e565b61024e565b6040516101199190611e1f565b60405180910390f35b610135610130366004611725565b6102a5565b6040516101199190611a42565b61014a6102ed565b6040516101199190611a4d565b61014a6101653660046117a0565b61037b565b61017d6101783660046114fb565b610449565b005b61017d61018d36600461175d565b6106af565b6101a56101a0366004611667565b6107b1565b6040516101199190611a01565b6101c56101c03660046117a0565b6108d1565b6040516101199190611e10565b61017d6108e7565b6101e2610970565b6040516101199190611957565b61017d6101fd366004611604565b610980565b61017d6102103660046117b8565b610a4e565b6101356102233660046114c9565b610b66565b61017d6102363660046115a1565b610b94565b61017d6102493660046114a8565b610d2a565b60006001600160a01b03831661027f5760405162461bcd60e51b815260040161027690611b05565b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b14806102d657506001600160e01b031982166303a24d0760e21b145b806102e557506102e582610deb565b90505b919050565b600480546102fa90611f75565b80601f016020809104026020016040519081016040528092919081815260200182805461032690611f75565b80156103735780601f1061034857610100808354040283529160200191610373565b820191906000526020600020905b81548152906001019060200180831161035657829003601f168201915b505050505081565b60008181526008602052604090205460609061ffff16156104355760008281526008602090815260408083205461ffff16808452600683528184208251808401845260018152602f60f81b81860152828652600790945291909320549091906103ed906103e89087611f32565b610e04565b60405180604001604052806005815260200164173539b7b760d91b81525060405160200161041e949392919061189d565b6040516020818303038152906040529150506102e8565b505060408051602081019091526000815290565b815183511461046a5760405162461bcd60e51b815260040161027690611d87565b6001600160a01b0384166104905760405162461bcd60e51b815260040161027690611bdf565b610498610f4a565b6001600160a01b0316856001600160a01b031614806104be57506104be85610223610f4a565b6104da5760405162461bcd60e51b815260040161027690611c24565b60006104e4610f4a565b90506104f48187878787876106a7565b60005b845181101561064157600085828151811061052257634e487b7160e01b600052603260045260246000fd5b60200260200101519050600085838151811061054e57634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038e16835290935291909120549091508181101561059e5760405162461bcd60e51b815260040161027690611c76565b6105a88282611f32565b60008085815260200190815260200160002060008c6001600160a01b03166001600160a01b03168152602001908152602001600020819055508160008085815260200190815260200160002060008b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546106269190611eb6565b925050819055505050508061063a90611fb0565b90506104f7565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610691929190611a14565b60405180910390a46106a7818787878787610f4e565b505050505050565b60055460ff16806106df57506106c3610f4a565b6001600160a01b03166106d4610970565b6001600160a01b0316145b6106fb5760405162461bcd60e51b815260040161027690611cc0565b6107048261105c565b60055460089060009061072190610100900461ffff166001611e90565b61ffff90811682526020820192909252604001600020805461ffff191692821692909217909155600580546001928391610762918391610100900416611e90565b92506101000a81548161ffff021916908361ffff1602179055506107ad610787610f4a565b60055460408051602081019091526000815261ffff6101009092048216918516906110f8565b5050565b606081518351146107d45760405162461bcd60e51b815260040161027690611d3e565b6000835167ffffffffffffffff8111156107fe57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610827578160200160208202803683370190505b50905060005b84518110156108c95761088e85828151811061085957634e487b7160e01b600052603260045260246000fd5b602002602001015185838151811061088157634e487b7160e01b600052603260045260246000fd5b602002602001015161024e565b8282815181106108ae57634e487b7160e01b600052603260045260246000fd5b60209081029190910101526108c281611fb0565b905061082d565b509392505050565b60009081526008602052604090205461ffff1690565b6108ef610f4a565b6001600160a01b0316610900610970565b6001600160a01b0316146109265760405162461bcd60e51b815260040161027690611cc0565b6003546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600380546001600160a01b0319169055565b6003546001600160a01b03165b90565b816001600160a01b0316610992610f4a565b6001600160a01b031614156109b95760405162461bcd60e51b815260040161027690611cf5565b80600160006109c6610f4a565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155610a0a610f4a565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610a429190611a42565b60405180910390a35050565b60055460ff1680610a7e5750610a62610f4a565b6001600160a01b0316610a73610970565b6001600160a01b0316145b610a9a5760405162461bcd60e51b815260040161027690611cc0565b610aa38261105c565b5060005b8360ff168160ff161015610b60576001600560018282829054906101000a900461ffff16610ad59190611e90565b825461ffff91821661010093840a908102908302199091161790925560055490810482166000908152600860205260409020805461ffff1916630100000090920490921617905550610b4e610b28610f4a565b60055460408051602081019091526000815261ffff6101009092048216918616906110f8565b610b59600182611ece565b9050610aa7565b50505050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6001600160a01b038416610bba5760405162461bcd60e51b815260040161027690611bdf565b610bc2610f4a565b6001600160a01b0316856001600160a01b03161480610be85750610be885610223610f4a565b610c045760405162461bcd60e51b815260040161027690611b96565b6000610c0e610f4a565b9050610c2e818787610c1f886111df565b610c28886111df565b876106a7565b6000848152602081815260408083206001600160a01b038a16845290915290205483811015610c6f5760405162461bcd60e51b815260040161027690611c76565b610c798482611f32565b6000868152602081815260408083206001600160a01b038c81168552925280832093909355881681529081208054869290610cb5908490611eb6565b92505081905550856001600160a01b0316876001600160a01b0316836001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628888604051610d0b929190611e28565b60405180910390a4610d21828888888888611238565b50505050505050565b610d32610f4a565b6001600160a01b0316610d43610970565b6001600160a01b031614610d695760405162461bcd60e51b815260040161027690611cc0565b6001600160a01b038116610d8f5760405162461bcd60e51b815260040161027690611b50565b6003546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160e01b031981166301ffc9a760e01b14919050565b606081610e2957506040805180820190915260018152600360fc1b60208201526102e8565b8160005b8115610e535780610e3d81611fb0565b9150610e4c9050600a83611ef3565b9150610e2d565b60008167ffffffffffffffff811115610e7c57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610ea6576020820181803683370190505b509050815b8515610f4157610ebc600182611f32565b90506000610ecb600a88611ef3565b610ed690600a611f13565b610ee09088611f32565b610eeb906030611ece565b905060008160f81b905080848481518110610f1657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350610f38600a89611ef3565b97505050610eab565b50949350505050565b3390565b610f60846001600160a01b0316611309565b156106a75760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190610f99908990899088908890889060040161196b565b602060405180830381600087803b158015610fb357600080fd5b505af1925050508015610fe3575060408051601f3d908101601f19168201909252610fe091810190611741565b60015b61102c57610fef611ffd565b80610ffa5750611014565b8060405162461bcd60e51b81526004016102769190611a4d565b60405162461bcd60e51b815260040161027690611a60565b6001600160e01b0319811663bc197c8160e01b14610d215760405162461bcd60e51b815260040161027690611abd565b60006001600560038282829054906101000a900461ffff1661107e9190611e90565b825461ffff91821661010093840a9081029083021990911617909255600580546301000000808204851660009081526007602090815260408083209690940487169095559254049093168152600682529190912084516110e39350909185019061130f565b50506005546301000000900461ffff16919050565b6001600160a01b03841661111e5760405162461bcd60e51b815260040161027690611dcf565b6000611128610f4a565b905061113a81600087610c1f886111df565b6000848152602081815260408083206001600160a01b03891684529091528120805485929061116a908490611eb6565b92505081905550846001600160a01b031660006001600160a01b0316826001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6287876040516111c1929190611e28565b60405180910390a46111d881600087878787611238565b5050505050565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061122757634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b61124a846001600160a01b0316611309565b156106a75760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061128390899089908890889088906004016119c9565b602060405180830381600087803b15801561129d57600080fd5b505af19250505080156112cd575060408051601f3d908101601f191682019092526112ca91810190611741565b60015b6112d957610fef611ffd565b6001600160e01b0319811663f23a6e6160e01b14610d215760405162461bcd60e51b815260040161027690611abd565b3b151590565b82805461131b90611f75565b90600052602060002090601f01602090048101928261133d5760008555611383565b82601f1061135657805160ff1916838001178555611383565b82800160010185558215611383579182015b82811115611383578251825591602001919060010190611368565b5061138f929150611393565b5090565b5b8082111561138f5760008155600101611394565b80356001600160a01b03811681146102e857600080fd5b600082601f8301126113cf578081fd5b813560206113e46113df83611e60565b611e36565b8281528181019085830183850287018401881015611400578586fd5b855b8581101561141e57813584529284019290840190600101611402565b5090979650505050505050565b600082601f83011261143b578081fd5b813567ffffffffffffffff81111561145557611455611fe1565b611468601f8201601f1916602001611e36565b81815284602083860101111561147c578283fd5b816020850160208301379081016020019190915292915050565b803561ffff811681146102e857600080fd5b6000602082840312156114b9578081fd5b6114c2826113a8565b9392505050565b600080604083850312156114db578081fd5b6114e4836113a8565b91506114f2602084016113a8565b90509250929050565b600080600080600060a08688031215611512578081fd5b61151b866113a8565b9450611529602087016113a8565b9350604086013567ffffffffffffffff80821115611545578283fd5b61155189838a016113bf565b94506060880135915080821115611566578283fd5b61157289838a016113bf565b93506080880135915080821115611587578283fd5b506115948882890161142b565b9150509295509295909350565b600080600080600060a086880312156115b8578081fd5b6115c1866113a8565b94506115cf602087016113a8565b93506040860135925060608601359150608086013567ffffffffffffffff8111156115f8578182fd5b6115948882890161142b565b60008060408385031215611616578182fd5b61161f836113a8565b915060208301358015158114611633578182fd5b809150509250929050565b60008060408385031215611650578182fd5b611659836113a8565b946020939093013593505050565b60008060408385031215611679578182fd5b823567ffffffffffffffff80821115611690578384fd5b818501915085601f8301126116a3578384fd5b813560206116b36113df83611e60565b82815281810190858301838502870184018b10156116cf578889fd5b8896505b848710156116f8576116e4816113a8565b8352600196909601959183019183016116d3565b509650508601359250508082111561170e578283fd5b5061171b858286016113bf565b9150509250929050565b600060208284031215611736578081fd5b81356114c2816120a2565b600060208284031215611752578081fd5b81516114c2816120a2565b6000806040838503121561176f578182fd5b823567ffffffffffffffff811115611785578283fd5b6117918582860161142b565b9250506114f260208401611496565b6000602082840312156117b1578081fd5b5035919050565b6000806000606084860312156117cc578081fd5b833560ff811681146117dc578182fd5b9250602084013567ffffffffffffffff8111156117f7578182fd5b6118038682870161142b565b92505061181260408501611496565b90509250925092565b6000815180845260208085019450808401835b8381101561184a5781518752958201959082019060010161182e565b509495945050505050565b6000815180845261186d816020860160208601611f49565b601f01601f19169290920160200192915050565b60008151611893818560208601611f49565b9290920192915050565b84546000908190600281046001808316806118b957607f831692505b60208084108214156118d957634e487b7160e01b87526022600452602487fd5b8180156118ed57600181146118fe5761192a565b60ff1986168952848901965061192a565b6119078d611e84565b885b868110156119225781548b820152908501908301611909565b505084890196505b50505050505061194c6119466119408389611881565b87611881565b85611881565b979650505050505050565b6001600160a01b0391909116815260200190565b60006001600160a01b03808816835280871660208401525060a0604083015261199760a083018661181b565b82810360608401526119a9818661181b565b905082810360808401526119bd8185611855565b98975050505050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a0608083015261194c60a0830184611855565b6000602082526114c2602083018461181b565b600060408252611a27604083018561181b565b8281036020840152611a39818561181b565b95945050505050565b901515815260200190565b6000602082526114c26020830184611855565b60208082526034908201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560408201527f526563656976657220696d706c656d656e746572000000000000000000000000606082015260800190565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6020808252602b908201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60408201526a65726f206164647265737360a81b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526029908201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260408201526808185c1c1c9bdd995960ba1b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526032908201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206040820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526029908201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604082015268103337b91039b2b63360b91b606082015260800190565b60208082526029908201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604082015268040dad2e6dac2e8c6d60bb1b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b61ffff91909116815260200190565b90815260200190565b918252602082015260400190565b60405181810167ffffffffffffffff81118282101715611e5857611e58611fe1565b604052919050565b600067ffffffffffffffff821115611e7a57611e7a611fe1565b5060209081020190565b60009081526020902090565b600061ffff808316818516808303821115611ead57611ead611fcb565b01949350505050565b60008219821115611ec957611ec9611fcb565b500190565b600060ff821660ff84168060ff03821115611eeb57611eeb611fcb565b019392505050565b600082611f0e57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611f2d57611f2d611fcb565b500290565b600082821015611f4457611f44611fcb565b500390565b60005b83811015611f64578181015183820152602001611f4c565b83811115610b605750506000910152565b600281046001821680611f8957607f821691505b60208210811415611faa57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415611fc457611fc4611fcb565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60e01c90565b600060443d101561200d5761097d565b600481823e6308c379a06120218251611ff7565b1461202b5761097d565b6040513d600319016004823e80513d67ffffffffffffffff816024840111818411171561205b575050505061097d565b82840192508251915080821115612075575050505061097d565b503d8301602082840101111561208d5750505061097d565b601f01601f1916810160200160405291505090565b6001600160e01b0319811681146120b857600080fd5b5056fea26469706673582212207e2c64660e86c33d9656b02a8574cc6ccf6ca31012d56ec58b0ef9614df94d2164736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 135,
        "contract": "contracts/Collectable.sol:Collectable",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 141,
        "contract": "contracts/Collectable.sol:Collectable",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 143,
        "contract": "contracts/Collectable.sol:Collectable",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/Collectable.sol:Collectable",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1710,
        "contract": "contracts/Collectable.sol:Collectable",
        "label": "name",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 1712,
        "contract": "contracts/Collectable.sol:Collectable",
        "label": "_everyoneMint",
        "offset": 0,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 1714,
        "contract": "contracts/Collectable.sol:Collectable",
        "label": "_atToken",
        "offset": 1,
        "slot": "5",
        "type": "t_uint16"
      },
      {
        "astId": 1716,
        "contract": "contracts/Collectable.sol:Collectable",
        "label": "_collectionId",
        "offset": 3,
        "slot": "5",
        "type": "t_uint16"
      },
      {
        "astId": 1720,
        "contract": "contracts/Collectable.sol:Collectable",
        "label": "_collections",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint16,t_string_storage)"
      },
      {
        "astId": 1724,
        "contract": "contracts/Collectable.sol:Collectable",
        "label": "_collectionOffset",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint16,t_uint256)"
      },
      {
        "astId": 1728,
        "contract": "contracts/Collectable.sol:Collectable",
        "label": "_idToCollection",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint16)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint16,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint16,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint16)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}